{"version":3,"sources":["components/header/NavBar.js","components/footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["StyledNavBar","styled","nav","StyledHeaderButtons","ul","StyledNavButton","li","StyledLink","Link","NavBar","to","href","Component","StyledFooter","footer","Footer","Container","div","StyledMainContainer","App","history","createBrowserHistory","path","About","Contact","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"g9BAMA,IAAMA,EAAeC,IAAOC,IAAV,KAOZC,EAAsBF,IAAOG,GAAV,KAQnBC,EAAkBJ,IAAOK,GAAV,KAUfC,EAAaN,YAAOO,IAAPP,CAAH,KAsBDQ,E,uKAbP,OACI,kBAACT,EAAD,KACI,kBAACG,EAAD,KACI,kBAACE,EAAD,KAAiB,kBAACE,EAAD,CAAYG,GAAG,KAAf,SACjB,kBAACL,EAAD,KAAiB,kBAACE,EAAD,CAAYG,GAAG,UAAf,UACjB,kBAACL,EAAD,KAAiB,kBAACE,EAAD,CAAYG,GAAG,YAAf,YACjB,kBAACL,EAAD,KAAiB,uBAAGM,KAAK,sBAAR,iB,GARhBC,a,4ICnCrB,IAAMC,EAAeZ,IAAOa,OAAV,KAmBHC,E,uKAVP,OACI,kBAACF,EAAD,KACI,mC,GAJKD,a,kcCErB,IAAMI,EAAYf,IAAOgB,IAAV,KASTC,EAAsBjB,IAAOgB,IAAV,KAUV,SAASE,IACpB,IAAMC,EAAUC,cAEhB,OACI,kBAAC,IAAD,CAAQD,QAASA,GACf,kBAACJ,EAAD,KACI,kBAAC,EAAD,MACA,kBAACE,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOI,KAAK,UACR,kBAACC,EAAD,OAEJ,kBAAC,IAAD,CAAOD,KAAK,YACR,kBAACE,EAAD,OAGJ,kBAAC,IAAD,CAAOF,KAAK,KACR,kBAACG,EAAD,SAIZ,kBAAC,EAAD,QAMd,SAASA,IACL,OAAO,4GAGX,SAASF,IACL,OAAO,qCAGX,SAASC,IACL,OAAO,uCCvDSE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eb033597.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\n// https://webdesign.tutsplus.com/tutorials/how-to-build-a-responsive-navigation-bar-with-flexbox--cms-33535\n\nconst StyledNavBar = styled.nav`\n    display: block;\n    width: 100%;\n    height: 50px;\n    color: white;\n`;\n\nconst StyledHeaderButtons = styled.ul`\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: flex-end;\n`;\n\nconst StyledNavButton = styled.li`\n    padding: 10px;\n    color: white;\n    text-decoration: none;\n    &:visited: {\n        color: white;\n\n    }\n`;\n\nconst StyledLink = styled(Link)`\n    text-decoration: none;\n    &:visited: {\n        color: white;\n    }\n`;\n\nclass NavBar extends Component {\n    render() {\n        return (\n            <StyledNavBar>\n                <StyledHeaderButtons>\n                    <StyledNavButton><StyledLink to=\"/\">Home</StyledLink></StyledNavButton>\n                    <StyledNavButton><StyledLink to=\"/about\">About</StyledLink></StyledNavButton>\n                    <StyledNavButton><StyledLink to=\"/contact\">Contact</StyledLink></StyledNavButton>\n                    <StyledNavButton><a href=\"/EvanLinResume.pdf\">Resume</a></StyledNavButton>\n                </StyledHeaderButtons>\n            </StyledNavBar>\n        )\n    }\n}\n\nexport default NavBar;","import React, { Component } from 'react';\nimport styled from \"@emotion/styled\";\n\nconst StyledFooter = styled.footer`\n  display: block;\n  width: 100%;\n  height: 50px;\n  color: white;\n`;\n\nclass Footer extends Component {\n    render() {\n        return (\n            <StyledFooter>\n                <div>\n                    {/*Footer component*/}\n                </div>\n            </StyledFooter>\n        )\n    }\n}\n\nexport default Footer;","import React from 'react';\nimport { BrowserRouter as Router,\n    Route,\n    Link,\n    Switch,\n} from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport './App.css';\nimport NavBar from \"./components/header/NavBar\";\nimport Footer from \"./components/footer/Footer\";\nimport styled from \"@emotion/styled\";\n\nconst Container = styled.div`\n  background: #f8f8f8;\n  padding: 8px;\n  min-height: 100vh;\n  background-color: #282c34;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledMainContainer = styled.div`\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n    text-align: center;\n    display: flex;\n    flex: 1;\n`;\n\nexport default function App() {\n    const history = createBrowserHistory();\n\n    return (\n        <Router history={history}>\n          <Container>\n              <NavBar />\n              <StyledMainContainer>\n                  <Switch>\n                      <Route path=\"/about\">\n                          <About />\n                      </Route>\n                      <Route path=\"/contact\">\n                          <Contact />\n                      </Route>\n                      {/* Default path is home  */}\n                      <Route path=\"/\">\n                          <Home />\n                      </Route>\n                  </Switch>\n              </StyledMainContainer>\n              <Footer />\n          </Container>\n        </Router>\n    );\n}\n\nfunction Home() {\n    return <p>Hey! This page is currently under construction. Check back for updates later!</p>;\n}\n\nfunction About() {\n    return <h1>About</h1>;\n}\n\nfunction Contact() {\n    return <h1>Contact</h1>;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}